~ invalid_use
% Not quite sure how you'd use this on that.
% That doesn't seem right...
% Are you feeling a bit silly?
=> END

~ yarn
There is [color=cyan]YARN[/color] on the ground.
	Take it?
- Yes
	You absorb the [color=cyan]YARN[/color].
	do Inventory.add_item(Inventory.Item.YARN)
	do State.actionable_states_add_flag(State.ActionableStates.TOOK_YARN)
- No
=> END

~ stick
There is a [color=cyan]STICK[/color] on the ground.
	Take it?
- Yes
	You absorb the [color=cyan]STICK[/color].
	do Inventory.add_item(Inventory.Item.STICK)
	do State.actionable_states_add_flag(State.ActionableStates.TOOK_STICK)
- No
=> END

~ water
if not State.actionable_states_check_flag(State.ActionableStates.TOILET_EMPTY):
	There is [color=cyan]WATER[/color] in the toilet.
		Take it?
	- Yes
		if Inventory.get_num_items() > 0:
			While you've absorbed other items? Really?
			- Yes
				=> take_water
			- No
		else:
			=> take_water
	- No
else:
	Slippery.
=> END

~ take_water
You absorb the [color=cyan]WATER[/color].
do Inventory.add_item(Inventory.Item.WATER)
do State.actionable_states_add_flag(State.ActionableStates.TOILET_EMPTY)
=> END

~ key
if not State.actionable_states_check_flag(State.ActionableStates.KEY_FELL):
	There is a [color=cyan]KEY[/color] hanging on the wall here, but you can't reach it.
	do State.saw_key = true
elif State.actionable_states_check_flag(State.ActionableStates.KEY_FELL) and (not State.actionable_states_check_flag(State.ActionableStates.TOOK_KEY)):
	There is a [color=cyan]KEY[/color] on the ground.
		Take it?
	- Yes
		You absorb the [color=cyan]KEY[/color].
		do Inventory.add_item(Inventory.Item.KEY)
		do State.actionable_states_add_flag(State.ActionableStates.TOOK_KEY)
	- No
=> END 

~ drawer
if (not State.actionable_states_check_flag(State.ActionableStates.DRAWER_UNLOCKED)) and Inventory.has_item(Inventory.Item.KEY):
	You use the [color=cyan]KEY[/color] to unlock the drawer.
	do State.actionable_states_add_flag(State.ActionableStates.DRAWER_UNLOCKED)
	do Inventory.remove_item(Inventory.Item.KEY)
	=> take_markers
elif not State.actionable_states_check_flag(State.ActionableStates.DRAWER_UNLOCKED):
	It's locked.
elif State.actionable_states_check_flag(State.ActionableStates.DRAWER_UNLOCKED) and not State.actionable_states_check_flag(State.ActionableStates.DRAWER_EMPTY):
	=> take_markers
else:
	The drawer is empty.
=> END

~ take_markers
Inside the drawer is a [color=cyan]BOX OF MARKERS[/color].
Take the [color=cyan]MARKERS[/color]?
- Yes
	You absorb the [color=cyan]MARKERS[/color].
	do Inventory.add_item(Inventory.Item.MARKERS)
	do State.actionable_states_add_flag(State.ActionableStates.DRAWER_EMPTY)
- No
=> END

~ test
hi
=> END